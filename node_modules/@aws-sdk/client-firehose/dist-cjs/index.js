'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "firehose",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class FirehoseClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultFirehoseHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class FirehoseServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, FirehoseServiceException.prototype);
    }
}

const ProcessorParameterName = {
    BUFFER_INTERVAL_IN_SECONDS: "BufferIntervalInSeconds",
    BUFFER_SIZE_IN_MB: "BufferSizeInMBs",
    COMPRESSION_FORMAT: "CompressionFormat",
    DATA_MESSAGE_EXTRACTION: "DataMessageExtraction",
    Delimiter: "Delimiter",
    JSON_PARSING_ENGINE: "JsonParsingEngine",
    LAMBDA_ARN: "LambdaArn",
    LAMBDA_NUMBER_OF_RETRIES: "NumberOfRetries",
    METADATA_EXTRACTION_QUERY: "MetadataExtractionQuery",
    ROLE_ARN: "RoleArn",
    SUB_RECORD_TYPE: "SubRecordType",
};
const ProcessorType = {
    AppendDelimiterToRecord: "AppendDelimiterToRecord",
    CloudWatchLogProcessing: "CloudWatchLogProcessing",
    Decompression: "Decompression",
    Lambda: "Lambda",
    MetadataExtraction: "MetadataExtraction",
    RecordDeAggregation: "RecordDeAggregation",
};
const AmazonOpenSearchServerlessS3BackupMode = {
    AllDocuments: "AllDocuments",
    FailedDocumentsOnly: "FailedDocumentsOnly",
};
const CompressionFormat = {
    GZIP: "GZIP",
    HADOOP_SNAPPY: "HADOOP_SNAPPY",
    SNAPPY: "Snappy",
    UNCOMPRESSED: "UNCOMPRESSED",
    ZIP: "ZIP",
};
const NoEncryptionConfig = {
    NoEncryption: "NoEncryption",
};
const DefaultDocumentIdFormat = {
    FIREHOSE_DEFAULT: "FIREHOSE_DEFAULT",
    NO_DOCUMENT_ID: "NO_DOCUMENT_ID",
};
const AmazonopensearchserviceIndexRotationPeriod = {
    NoRotation: "NoRotation",
    OneDay: "OneDay",
    OneHour: "OneHour",
    OneMonth: "OneMonth",
    OneWeek: "OneWeek",
};
const AmazonopensearchserviceS3BackupMode = {
    AllDocuments: "AllDocuments",
    FailedDocumentsOnly: "FailedDocumentsOnly",
};
const Connectivity = {
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
};
class ConcurrentModificationException extends FirehoseServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
const ContentEncoding = {
    GZIP: "GZIP",
    NONE: "NONE",
};
const SSLMode = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
const DatabaseType = {
    MySQL: "MySQL",
    PostgreSQL: "PostgreSQL",
};
const KeyType = {
    AWS_OWNED_CMK: "AWS_OWNED_CMK",
    CUSTOMER_MANAGED_CMK: "CUSTOMER_MANAGED_CMK",
};
const DeliveryStreamType = {
    DatabaseAsSource: "DatabaseAsSource",
    DirectPut: "DirectPut",
    KinesisStreamAsSource: "KinesisStreamAsSource",
    MSKAsSource: "MSKAsSource",
};
const ElasticsearchIndexRotationPeriod = {
    NoRotation: "NoRotation",
    OneDay: "OneDay",
    OneHour: "OneHour",
    OneMonth: "OneMonth",
    OneWeek: "OneWeek",
};
const ElasticsearchS3BackupMode = {
    AllDocuments: "AllDocuments",
    FailedDocumentsOnly: "FailedDocumentsOnly",
};
const OrcCompression = {
    NONE: "NONE",
    SNAPPY: "SNAPPY",
    ZLIB: "ZLIB",
};
const OrcFormatVersion = {
    V0_11: "V0_11",
    V0_12: "V0_12",
};
const ParquetCompression = {
    GZIP: "GZIP",
    SNAPPY: "SNAPPY",
    UNCOMPRESSED: "UNCOMPRESSED",
};
const ParquetWriterVersion = {
    V1: "V1",
    V2: "V2",
};
const S3BackupMode = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
const HttpEndpointS3BackupMode = {
    AllData: "AllData",
    FailedDataOnly: "FailedDataOnly",
};
const IcebergS3BackupMode = {
    AllData: "AllData",
    FailedDataOnly: "FailedDataOnly",
};
const RedshiftS3BackupMode = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
const SnowflakeDataLoadingOption = {
    JSON_MAPPING: "JSON_MAPPING",
    VARIANT_CONTENT_AND_METADATA_MAPPING: "VARIANT_CONTENT_AND_METADATA_MAPPING",
    VARIANT_CONTENT_MAPPING: "VARIANT_CONTENT_MAPPING",
};
const SnowflakeS3BackupMode = {
    AllData: "AllData",
    FailedDataOnly: "FailedDataOnly",
};
const HECEndpointType = {
    Event: "Event",
    Raw: "Raw",
};
const SplunkS3BackupMode = {
    AllEvents: "AllEvents",
    FailedEventsOnly: "FailedEventsOnly",
};
class InvalidArgumentException extends FirehoseServiceException {
    name = "InvalidArgumentException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidArgumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidArgumentException.prototype);
    }
}
class InvalidKMSResourceException extends FirehoseServiceException {
    name = "InvalidKMSResourceException";
    $fault = "client";
    code;
    constructor(opts) {
        super({
            name: "InvalidKMSResourceException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKMSResourceException.prototype);
        this.code = opts.code;
    }
}
class LimitExceededException extends FirehoseServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class ResourceInUseException extends FirehoseServiceException {
    name = "ResourceInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
const DeliveryStreamFailureType = {
    CREATE_ENI_FAILED: "CREATE_ENI_FAILED",
    CREATE_KMS_GRANT_FAILED: "CREATE_KMS_GRANT_FAILED",
    DELETE_ENI_FAILED: "DELETE_ENI_FAILED",
    DISABLED_KMS_KEY: "DISABLED_KMS_KEY",
    ENI_ACCESS_DENIED: "ENI_ACCESS_DENIED",
    INVALID_KMS_KEY: "INVALID_KMS_KEY",
    KMS_ACCESS_DENIED: "KMS_ACCESS_DENIED",
    KMS_KEY_NOT_FOUND: "KMS_KEY_NOT_FOUND",
    KMS_OPT_IN_REQUIRED: "KMS_OPT_IN_REQUIRED",
    RETIRE_KMS_GRANT_FAILED: "RETIRE_KMS_GRANT_FAILED",
    SECURITY_GROUP_ACCESS_DENIED: "SECURITY_GROUP_ACCESS_DENIED",
    SECURITY_GROUP_NOT_FOUND: "SECURITY_GROUP_NOT_FOUND",
    SUBNET_ACCESS_DENIED: "SUBNET_ACCESS_DENIED",
    SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
    VPC_ENDPOINT_SERVICE_NAME_NOT_FOUND: "VPC_ENDPOINT_SERVICE_NAME_NOT_FOUND",
    VPC_INTERFACE_ENDPOINT_SERVICE_ACCESS_DENIED: "VPC_INTERFACE_ENDPOINT_SERVICE_ACCESS_DENIED",
};
const SnapshotRequestedBy = {
    FIREHOSE: "FIREHOSE",
    USER: "USER",
};
const SnapshotStatus = {
    COMPLETE: "COMPLETE",
    IN_PROGRESS: "IN_PROGRESS",
    SUSPENDED: "SUSPENDED",
};
class ResourceNotFoundException extends FirehoseServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
const DeliveryStreamEncryptionStatus = {
    DISABLED: "DISABLED",
    DISABLING: "DISABLING",
    DISABLING_FAILED: "DISABLING_FAILED",
    ENABLED: "ENABLED",
    ENABLING: "ENABLING",
    ENABLING_FAILED: "ENABLING_FAILED",
};
const DeliveryStreamStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    CREATING_FAILED: "CREATING_FAILED",
    DELETING: "DELETING",
    DELETING_FAILED: "DELETING_FAILED",
};
class InvalidSourceException extends FirehoseServiceException {
    name = "InvalidSourceException";
    $fault = "client";
    code;
    constructor(opts) {
        super({
            name: "InvalidSourceException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSourceException.prototype);
        this.code = opts.code;
    }
}
class ServiceUnavailableException extends FirehoseServiceException {
    name = "ServiceUnavailableException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
const HttpEndpointConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
    ...(obj.AccessKey && { AccessKey: smithyClient.SENSITIVE_STRING }),
});
const HttpEndpointCommonAttributeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AttributeName && { AttributeName: smithyClient.SENSITIVE_STRING }),
    ...(obj.AttributeValue && { AttributeValue: smithyClient.SENSITIVE_STRING }),
});
const HttpEndpointRequestConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CommonAttributes && {
        CommonAttributes: obj.CommonAttributes.map((item) => HttpEndpointCommonAttributeFilterSensitiveLog(item)),
    }),
});
const HttpEndpointDestinationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EndpointConfiguration && {
        EndpointConfiguration: HttpEndpointConfigurationFilterSensitiveLog(obj.EndpointConfiguration),
    }),
    ...(obj.RequestConfiguration && {
        RequestConfiguration: HttpEndpointRequestConfigurationFilterSensitiveLog(obj.RequestConfiguration),
    }),
});
const RedshiftDestinationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const SnowflakeRoleConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnowflakeRole && { SnowflakeRole: smithyClient.SENSITIVE_STRING }),
});
const SnowflakeVpcConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrivateLinkVpceId && { PrivateLinkVpceId: smithyClient.SENSITIVE_STRING }),
});
const SnowflakeDestinationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccountUrl && { AccountUrl: smithyClient.SENSITIVE_STRING }),
    ...(obj.PrivateKey && { PrivateKey: smithyClient.SENSITIVE_STRING }),
    ...(obj.KeyPassphrase && { KeyPassphrase: smithyClient.SENSITIVE_STRING }),
    ...(obj.User && { User: smithyClient.SENSITIVE_STRING }),
    ...(obj.Database && { Database: smithyClient.SENSITIVE_STRING }),
    ...(obj.Schema && { Schema: smithyClient.SENSITIVE_STRING }),
    ...(obj.Table && { Table: smithyClient.SENSITIVE_STRING }),
    ...(obj.SnowflakeRoleConfiguration && {
        SnowflakeRoleConfiguration: SnowflakeRoleConfigurationFilterSensitiveLog(obj.SnowflakeRoleConfiguration),
    }),
    ...(obj.MetaDataColumnName && { MetaDataColumnName: smithyClient.SENSITIVE_STRING }),
    ...(obj.ContentColumnName && { ContentColumnName: smithyClient.SENSITIVE_STRING }),
    ...(obj.SnowflakeVpcConfiguration && {
        SnowflakeVpcConfiguration: SnowflakeVpcConfigurationFilterSensitiveLog(obj.SnowflakeVpcConfiguration),
    }),
});
const CreateDeliveryStreamInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RedshiftDestinationConfiguration && {
        RedshiftDestinationConfiguration: RedshiftDestinationConfigurationFilterSensitiveLog(obj.RedshiftDestinationConfiguration),
    }),
    ...(obj.HttpEndpointDestinationConfiguration && {
        HttpEndpointDestinationConfiguration: HttpEndpointDestinationConfigurationFilterSensitiveLog(obj.HttpEndpointDestinationConfiguration),
    }),
    ...(obj.SnowflakeDestinationConfiguration && {
        SnowflakeDestinationConfiguration: SnowflakeDestinationConfigurationFilterSensitiveLog(obj.SnowflakeDestinationConfiguration),
    }),
});
const HttpEndpointDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
});
const HttpEndpointDestinationDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EndpointConfiguration && {
        EndpointConfiguration: HttpEndpointDescriptionFilterSensitiveLog(obj.EndpointConfiguration),
    }),
    ...(obj.RequestConfiguration && {
        RequestConfiguration: HttpEndpointRequestConfigurationFilterSensitiveLog(obj.RequestConfiguration),
    }),
});
const RedshiftDestinationDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const SnowflakeDestinationDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccountUrl && { AccountUrl: smithyClient.SENSITIVE_STRING }),
    ...(obj.User && { User: smithyClient.SENSITIVE_STRING }),
    ...(obj.Database && { Database: smithyClient.SENSITIVE_STRING }),
    ...(obj.Schema && { Schema: smithyClient.SENSITIVE_STRING }),
    ...(obj.Table && { Table: smithyClient.SENSITIVE_STRING }),
    ...(obj.SnowflakeRoleConfiguration && {
        SnowflakeRoleConfiguration: SnowflakeRoleConfigurationFilterSensitiveLog(obj.SnowflakeRoleConfiguration),
    }),
    ...(obj.MetaDataColumnName && { MetaDataColumnName: smithyClient.SENSITIVE_STRING }),
    ...(obj.ContentColumnName && { ContentColumnName: smithyClient.SENSITIVE_STRING }),
    ...(obj.SnowflakeVpcConfiguration && {
        SnowflakeVpcConfiguration: SnowflakeVpcConfigurationFilterSensitiveLog(obj.SnowflakeVpcConfiguration),
    }),
});
const DestinationDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RedshiftDestinationDescription && {
        RedshiftDestinationDescription: RedshiftDestinationDescriptionFilterSensitiveLog(obj.RedshiftDestinationDescription),
    }),
    ...(obj.HttpEndpointDestinationDescription && {
        HttpEndpointDestinationDescription: HttpEndpointDestinationDescriptionFilterSensitiveLog(obj.HttpEndpointDestinationDescription),
    }),
    ...(obj.SnowflakeDestinationDescription && {
        SnowflakeDestinationDescription: SnowflakeDestinationDescriptionFilterSensitiveLog(obj.SnowflakeDestinationDescription),
    }),
});
const DeliveryStreamDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Destinations && {
        Destinations: obj.Destinations.map((item) => DestinationDescriptionFilterSensitiveLog(item)),
    }),
});
const DescribeDeliveryStreamOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const HttpEndpointDestinationUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EndpointConfiguration && {
        EndpointConfiguration: HttpEndpointConfigurationFilterSensitiveLog(obj.EndpointConfiguration),
    }),
    ...(obj.RequestConfiguration && {
        RequestConfiguration: HttpEndpointRequestConfigurationFilterSensitiveLog(obj.RequestConfiguration),
    }),
});
const RedshiftDestinationUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const SnowflakeDestinationUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccountUrl && { AccountUrl: smithyClient.SENSITIVE_STRING }),
    ...(obj.PrivateKey && { PrivateKey: smithyClient.SENSITIVE_STRING }),
    ...(obj.KeyPassphrase && { KeyPassphrase: smithyClient.SENSITIVE_STRING }),
    ...(obj.User && { User: smithyClient.SENSITIVE_STRING }),
    ...(obj.Database && { Database: smithyClient.SENSITIVE_STRING }),
    ...(obj.Schema && { Schema: smithyClient.SENSITIVE_STRING }),
    ...(obj.Table && { Table: smithyClient.SENSITIVE_STRING }),
    ...(obj.SnowflakeRoleConfiguration && {
        SnowflakeRoleConfiguration: SnowflakeRoleConfigurationFilterSensitiveLog(obj.SnowflakeRoleConfiguration),
    }),
    ...(obj.MetaDataColumnName && { MetaDataColumnName: smithyClient.SENSITIVE_STRING }),
    ...(obj.ContentColumnName && { ContentColumnName: smithyClient.SENSITIVE_STRING }),
});
const UpdateDestinationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RedshiftDestinationUpdate && {
        RedshiftDestinationUpdate: RedshiftDestinationUpdateFilterSensitiveLog(obj.RedshiftDestinationUpdate),
    }),
    ...(obj.HttpEndpointDestinationUpdate && {
        HttpEndpointDestinationUpdate: HttpEndpointDestinationUpdateFilterSensitiveLog(obj.HttpEndpointDestinationUpdate),
    }),
    ...(obj.SnowflakeDestinationUpdate && {
        SnowflakeDestinationUpdate: SnowflakeDestinationUpdateFilterSensitiveLog(obj.SnowflakeDestinationUpdate),
    }),
});

const se_CreateDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDeliveryStream");
    let body;
    body = JSON.stringify(se_CreateDeliveryStreamInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDeliveryStreamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDeliveryStreams");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForDeliveryStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRecordCommand = async (input, context) => {
    const headers = sharedHeaders("PutRecord");
    let body;
    body = JSON.stringify(se_PutRecordInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRecordBatchCommand = async (input, context) => {
    const headers = sharedHeaders("PutRecordBatch");
    let body;
    body = JSON.stringify(se_PutRecordBatchInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartDeliveryStreamEncryptionCommand = async (input, context) => {
    const headers = sharedHeaders("StartDeliveryStreamEncryption");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopDeliveryStreamEncryptionCommand = async (input, context) => {
    const headers = sharedHeaders("StopDeliveryStreamEncryption");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("TagDeliveryStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagDeliveryStreamCommand = async (input, context) => {
    const headers = sharedHeaders("UntagDeliveryStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDestination");
    let body;
    body = JSON.stringify(se_UpdateDestinationInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CreateDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeliveryStreamOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDeliveryStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutRecordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutRecordBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDeliveryStreamEncryptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopDeliveryStreamEncryptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagDeliveryStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.firehose#InvalidArgumentException":
            throw await de_InvalidArgumentExceptionRes(parsedOutput);
        case "InvalidKMSResourceException":
        case "com.amazonaws.firehose#InvalidKMSResourceException":
            throw await de_InvalidKMSResourceExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.firehose#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ResourceInUseException":
        case "com.amazonaws.firehose#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.firehose#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "InvalidSourceException":
        case "com.amazonaws.firehose#InvalidSourceException":
            throw await de_InvalidSourceExceptionRes(parsedOutput);
        case "ServiceUnavailableException":
        case "com.amazonaws.firehose#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput);
        case "ConcurrentModificationException":
        case "com.amazonaws.firehose#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidKMSResourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidKMSResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidSourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidSourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_CreateDeliveryStreamInput = (input, context) => {
    return smithyClient.take(input, {
        AmazonOpenSearchServerlessDestinationConfiguration: smithyClient._json,
        AmazonopensearchserviceDestinationConfiguration: smithyClient._json,
        DatabaseSourceConfiguration: smithyClient._json,
        DeliveryStreamEncryptionConfigurationInput: smithyClient._json,
        DeliveryStreamName: [],
        DeliveryStreamType: [],
        DirectPutSourceConfiguration: smithyClient._json,
        ElasticsearchDestinationConfiguration: smithyClient._json,
        ExtendedS3DestinationConfiguration: (_) => se_ExtendedS3DestinationConfiguration(_),
        HttpEndpointDestinationConfiguration: smithyClient._json,
        IcebergDestinationConfiguration: smithyClient._json,
        KinesisStreamSourceConfiguration: smithyClient._json,
        MSKSourceConfiguration: (_) => se_MSKSourceConfiguration(_),
        RedshiftDestinationConfiguration: smithyClient._json,
        S3DestinationConfiguration: smithyClient._json,
        SnowflakeDestinationConfiguration: smithyClient._json,
        SplunkDestinationConfiguration: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_DataFormatConversionConfiguration = (input, context) => {
    return smithyClient.take(input, {
        Enabled: [],
        InputFormatConfiguration: smithyClient._json,
        OutputFormatConfiguration: (_) => se_OutputFormatConfiguration(_),
        SchemaConfiguration: smithyClient._json,
    });
};
const se_ExtendedS3DestinationConfiguration = (input, context) => {
    return smithyClient.take(input, {
        BucketARN: [],
        BufferingHints: smithyClient._json,
        CloudWatchLoggingOptions: smithyClient._json,
        CompressionFormat: [],
        CustomTimeZone: [],
        DataFormatConversionConfiguration: (_) => se_DataFormatConversionConfiguration(_),
        DynamicPartitioningConfiguration: smithyClient._json,
        EncryptionConfiguration: smithyClient._json,
        ErrorOutputPrefix: [],
        FileExtension: [],
        Prefix: [],
        ProcessingConfiguration: smithyClient._json,
        RoleARN: [],
        S3BackupConfiguration: smithyClient._json,
        S3BackupMode: [],
    });
};
const se_ExtendedS3DestinationUpdate = (input, context) => {
    return smithyClient.take(input, {
        BucketARN: [],
        BufferingHints: smithyClient._json,
        CloudWatchLoggingOptions: smithyClient._json,
        CompressionFormat: [],
        CustomTimeZone: [],
        DataFormatConversionConfiguration: (_) => se_DataFormatConversionConfiguration(_),
        DynamicPartitioningConfiguration: smithyClient._json,
        EncryptionConfiguration: smithyClient._json,
        ErrorOutputPrefix: [],
        FileExtension: [],
        Prefix: [],
        ProcessingConfiguration: smithyClient._json,
        RoleARN: [],
        S3BackupMode: [],
        S3BackupUpdate: smithyClient._json,
    });
};
const se_MSKSourceConfiguration = (input, context) => {
    return smithyClient.take(input, {
        AuthenticationConfiguration: smithyClient._json,
        MSKClusterARN: [],
        ReadFromTimestamp: (_) => _.getTime() / 1_000,
        TopicName: [],
    });
};
const se_OrcSerDe = (input, context) => {
    return smithyClient.take(input, {
        BlockSizeBytes: [],
        BloomFilterColumns: smithyClient._json,
        BloomFilterFalsePositiveProbability: smithyClient.serializeFloat,
        Compression: [],
        DictionaryKeyThreshold: smithyClient.serializeFloat,
        EnablePadding: [],
        FormatVersion: [],
        PaddingTolerance: smithyClient.serializeFloat,
        RowIndexStride: [],
        StripeSizeBytes: [],
    });
};
const se_OutputFormatConfiguration = (input, context) => {
    return smithyClient.take(input, {
        Serializer: (_) => se_Serializer(_),
    });
};
const se_PutRecordBatchInput = (input, context) => {
    return smithyClient.take(input, {
        DeliveryStreamName: [],
        Records: (_) => se_PutRecordBatchRequestEntryList(_, context),
    });
};
const se_PutRecordBatchRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se__Record(entry, context);
    });
};
const se_PutRecordInput = (input, context) => {
    return smithyClient.take(input, {
        DeliveryStreamName: [],
        Record: (_) => se__Record(_, context),
    });
};
const se__Record = (input, context) => {
    return smithyClient.take(input, {
        Data: context.base64Encoder,
    });
};
const se_Serializer = (input, context) => {
    return smithyClient.take(input, {
        OrcSerDe: (_) => se_OrcSerDe(_),
        ParquetSerDe: smithyClient._json,
    });
};
const se_UpdateDestinationInput = (input, context) => {
    return smithyClient.take(input, {
        AmazonOpenSearchServerlessDestinationUpdate: smithyClient._json,
        AmazonopensearchserviceDestinationUpdate: smithyClient._json,
        CurrentDeliveryStreamVersionId: [],
        DeliveryStreamName: [],
        DestinationId: [],
        ElasticsearchDestinationUpdate: smithyClient._json,
        ExtendedS3DestinationUpdate: (_) => se_ExtendedS3DestinationUpdate(_),
        HttpEndpointDestinationUpdate: smithyClient._json,
        IcebergDestinationUpdate: smithyClient._json,
        RedshiftDestinationUpdate: smithyClient._json,
        S3DestinationUpdate: smithyClient._json,
        SnowflakeDestinationUpdate: smithyClient._json,
        SplunkDestinationUpdate: smithyClient._json,
    });
};
const de_DatabaseSnapshotInfo = (output, context) => {
    return smithyClient.take(output, {
        FailureDescription: smithyClient._json,
        Id: smithyClient.expectString,
        RequestTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RequestedBy: smithyClient.expectString,
        Status: smithyClient.expectString,
        Table: smithyClient.expectString,
    });
};
const de_DatabaseSnapshotInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatabaseSnapshotInfo(entry);
    });
    return retVal;
};
const de_DatabaseSourceDescription = (output, context) => {
    return smithyClient.take(output, {
        Columns: smithyClient._json,
        DatabaseSourceAuthenticationConfiguration: smithyClient._json,
        DatabaseSourceVPCConfiguration: smithyClient._json,
        Databases: smithyClient._json,
        Endpoint: smithyClient.expectString,
        Port: smithyClient.expectInt32,
        SSLMode: smithyClient.expectString,
        SnapshotInfo: (_) => de_DatabaseSnapshotInfoList(_),
        SnapshotWatermarkTable: smithyClient.expectString,
        SurrogateKeys: smithyClient._json,
        Tables: smithyClient._json,
        Type: smithyClient.expectString,
    });
};
const de_DataFormatConversionConfiguration = (output, context) => {
    return smithyClient.take(output, {
        Enabled: smithyClient.expectBoolean,
        InputFormatConfiguration: smithyClient._json,
        OutputFormatConfiguration: (_) => de_OutputFormatConfiguration(_),
        SchemaConfiguration: smithyClient._json,
    });
};
const de_DeliveryStreamDescription = (output, context) => {
    return smithyClient.take(output, {
        CreateTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeliveryStreamARN: smithyClient.expectString,
        DeliveryStreamEncryptionConfiguration: smithyClient._json,
        DeliveryStreamName: smithyClient.expectString,
        DeliveryStreamStatus: smithyClient.expectString,
        DeliveryStreamType: smithyClient.expectString,
        Destinations: (_) => de_DestinationDescriptionList(_),
        FailureDescription: smithyClient._json,
        HasMoreDestinations: smithyClient.expectBoolean,
        LastUpdateTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_SourceDescription(_),
        VersionId: smithyClient.expectString,
    });
};
const de_DescribeDeliveryStreamOutput = (output, context) => {
    return smithyClient.take(output, {
        DeliveryStreamDescription: (_) => de_DeliveryStreamDescription(_),
    });
};
const de_DestinationDescription = (output, context) => {
    return smithyClient.take(output, {
        AmazonOpenSearchServerlessDestinationDescription: smithyClient._json,
        AmazonopensearchserviceDestinationDescription: smithyClient._json,
        DestinationId: smithyClient.expectString,
        ElasticsearchDestinationDescription: smithyClient._json,
        ExtendedS3DestinationDescription: (_) => de_ExtendedS3DestinationDescription(_),
        HttpEndpointDestinationDescription: smithyClient._json,
        IcebergDestinationDescription: smithyClient._json,
        RedshiftDestinationDescription: smithyClient._json,
        S3DestinationDescription: smithyClient._json,
        SnowflakeDestinationDescription: smithyClient._json,
        SplunkDestinationDescription: smithyClient._json,
    });
};
const de_DestinationDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DestinationDescription(entry);
    });
    return retVal;
};
const de_ExtendedS3DestinationDescription = (output, context) => {
    return smithyClient.take(output, {
        BucketARN: smithyClient.expectString,
        BufferingHints: smithyClient._json,
        CloudWatchLoggingOptions: smithyClient._json,
        CompressionFormat: smithyClient.expectString,
        CustomTimeZone: smithyClient.expectString,
        DataFormatConversionConfiguration: (_) => de_DataFormatConversionConfiguration(_),
        DynamicPartitioningConfiguration: smithyClient._json,
        EncryptionConfiguration: smithyClient._json,
        ErrorOutputPrefix: smithyClient.expectString,
        FileExtension: smithyClient.expectString,
        Prefix: smithyClient.expectString,
        ProcessingConfiguration: smithyClient._json,
        RoleARN: smithyClient.expectString,
        S3BackupDescription: smithyClient._json,
        S3BackupMode: smithyClient.expectString,
    });
};
const de_KinesisStreamSourceDescription = (output, context) => {
    return smithyClient.take(output, {
        DeliveryStartTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        KinesisStreamARN: smithyClient.expectString,
        RoleARN: smithyClient.expectString,
    });
};
const de_MSKSourceDescription = (output, context) => {
    return smithyClient.take(output, {
        AuthenticationConfiguration: smithyClient._json,
        DeliveryStartTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MSKClusterARN: smithyClient.expectString,
        ReadFromTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TopicName: smithyClient.expectString,
    });
};
const de_OrcSerDe = (output, context) => {
    return smithyClient.take(output, {
        BlockSizeBytes: smithyClient.expectInt32,
        BloomFilterColumns: smithyClient._json,
        BloomFilterFalsePositiveProbability: smithyClient.limitedParseDouble,
        Compression: smithyClient.expectString,
        DictionaryKeyThreshold: smithyClient.limitedParseDouble,
        EnablePadding: smithyClient.expectBoolean,
        FormatVersion: smithyClient.expectString,
        PaddingTolerance: smithyClient.limitedParseDouble,
        RowIndexStride: smithyClient.expectInt32,
        StripeSizeBytes: smithyClient.expectInt32,
    });
};
const de_OutputFormatConfiguration = (output, context) => {
    return smithyClient.take(output, {
        Serializer: (_) => de_Serializer(_),
    });
};
const de_Serializer = (output, context) => {
    return smithyClient.take(output, {
        OrcSerDe: (_) => de_OrcSerDe(_),
        ParquetSerDe: smithyClient._json,
    });
};
const de_SourceDescription = (output, context) => {
    return smithyClient.take(output, {
        DatabaseSourceDescription: (_) => de_DatabaseSourceDescription(_),
        DirectPutSourceDescription: smithyClient._json,
        KinesisStreamSourceDescription: (_) => de_KinesisStreamSourceDescription(_),
        MSKSourceDescription: (_) => de_MSKSourceDescription(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(FirehoseServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Firehose_20150804.${operation}`,
    };
}

class CreateDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "CreateDeliveryStream", {})
    .n("FirehoseClient", "CreateDeliveryStreamCommand")
    .f(CreateDeliveryStreamInputFilterSensitiveLog, void 0)
    .ser(se_CreateDeliveryStreamCommand)
    .de(de_CreateDeliveryStreamCommand)
    .build() {
}

class DeleteDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "DeleteDeliveryStream", {})
    .n("FirehoseClient", "DeleteDeliveryStreamCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeliveryStreamCommand)
    .de(de_DeleteDeliveryStreamCommand)
    .build() {
}

class DescribeDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "DescribeDeliveryStream", {})
    .n("FirehoseClient", "DescribeDeliveryStreamCommand")
    .f(void 0, DescribeDeliveryStreamOutputFilterSensitiveLog)
    .ser(se_DescribeDeliveryStreamCommand)
    .de(de_DescribeDeliveryStreamCommand)
    .build() {
}

class ListDeliveryStreamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "ListDeliveryStreams", {})
    .n("FirehoseClient", "ListDeliveryStreamsCommand")
    .f(void 0, void 0)
    .ser(se_ListDeliveryStreamsCommand)
    .de(de_ListDeliveryStreamsCommand)
    .build() {
}

class ListTagsForDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "ListTagsForDeliveryStream", {})
    .n("FirehoseClient", "ListTagsForDeliveryStreamCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForDeliveryStreamCommand)
    .de(de_ListTagsForDeliveryStreamCommand)
    .build() {
}

class PutRecordBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "PutRecordBatch", {})
    .n("FirehoseClient", "PutRecordBatchCommand")
    .f(void 0, void 0)
    .ser(se_PutRecordBatchCommand)
    .de(de_PutRecordBatchCommand)
    .build() {
}

class PutRecordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "PutRecord", {})
    .n("FirehoseClient", "PutRecordCommand")
    .f(void 0, void 0)
    .ser(se_PutRecordCommand)
    .de(de_PutRecordCommand)
    .build() {
}

class StartDeliveryStreamEncryptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "StartDeliveryStreamEncryption", {})
    .n("FirehoseClient", "StartDeliveryStreamEncryptionCommand")
    .f(void 0, void 0)
    .ser(se_StartDeliveryStreamEncryptionCommand)
    .de(de_StartDeliveryStreamEncryptionCommand)
    .build() {
}

class StopDeliveryStreamEncryptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "StopDeliveryStreamEncryption", {})
    .n("FirehoseClient", "StopDeliveryStreamEncryptionCommand")
    .f(void 0, void 0)
    .ser(se_StopDeliveryStreamEncryptionCommand)
    .de(de_StopDeliveryStreamEncryptionCommand)
    .build() {
}

class TagDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "TagDeliveryStream", {})
    .n("FirehoseClient", "TagDeliveryStreamCommand")
    .f(void 0, void 0)
    .ser(se_TagDeliveryStreamCommand)
    .de(de_TagDeliveryStreamCommand)
    .build() {
}

class UntagDeliveryStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "UntagDeliveryStream", {})
    .n("FirehoseClient", "UntagDeliveryStreamCommand")
    .f(void 0, void 0)
    .ser(se_UntagDeliveryStreamCommand)
    .de(de_UntagDeliveryStreamCommand)
    .build() {
}

class UpdateDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Firehose_20150804", "UpdateDestination", {})
    .n("FirehoseClient", "UpdateDestinationCommand")
    .f(UpdateDestinationInputFilterSensitiveLog, void 0)
    .ser(se_UpdateDestinationCommand)
    .de(de_UpdateDestinationCommand)
    .build() {
}

const commands = {
    CreateDeliveryStreamCommand,
    DeleteDeliveryStreamCommand,
    DescribeDeliveryStreamCommand,
    ListDeliveryStreamsCommand,
    ListTagsForDeliveryStreamCommand,
    PutRecordCommand,
    PutRecordBatchCommand,
    StartDeliveryStreamEncryptionCommand,
    StopDeliveryStreamEncryptionCommand,
    TagDeliveryStreamCommand,
    UntagDeliveryStreamCommand,
    UpdateDestinationCommand,
};
class Firehose extends FirehoseClient {
}
smithyClient.createAggregatedClient(commands, Firehose);

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AmazonOpenSearchServerlessS3BackupMode = AmazonOpenSearchServerlessS3BackupMode;
exports.AmazonopensearchserviceIndexRotationPeriod = AmazonopensearchserviceIndexRotationPeriod;
exports.AmazonopensearchserviceS3BackupMode = AmazonopensearchserviceS3BackupMode;
exports.CompressionFormat = CompressionFormat;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.Connectivity = Connectivity;
exports.ContentEncoding = ContentEncoding;
exports.CreateDeliveryStreamCommand = CreateDeliveryStreamCommand;
exports.CreateDeliveryStreamInputFilterSensitiveLog = CreateDeliveryStreamInputFilterSensitiveLog;
exports.DatabaseType = DatabaseType;
exports.DefaultDocumentIdFormat = DefaultDocumentIdFormat;
exports.DeleteDeliveryStreamCommand = DeleteDeliveryStreamCommand;
exports.DeliveryStreamDescriptionFilterSensitiveLog = DeliveryStreamDescriptionFilterSensitiveLog;
exports.DeliveryStreamEncryptionStatus = DeliveryStreamEncryptionStatus;
exports.DeliveryStreamFailureType = DeliveryStreamFailureType;
exports.DeliveryStreamStatus = DeliveryStreamStatus;
exports.DeliveryStreamType = DeliveryStreamType;
exports.DescribeDeliveryStreamCommand = DescribeDeliveryStreamCommand;
exports.DescribeDeliveryStreamOutputFilterSensitiveLog = DescribeDeliveryStreamOutputFilterSensitiveLog;
exports.DestinationDescriptionFilterSensitiveLog = DestinationDescriptionFilterSensitiveLog;
exports.ElasticsearchIndexRotationPeriod = ElasticsearchIndexRotationPeriod;
exports.ElasticsearchS3BackupMode = ElasticsearchS3BackupMode;
exports.Firehose = Firehose;
exports.FirehoseClient = FirehoseClient;
exports.FirehoseServiceException = FirehoseServiceException;
exports.HECEndpointType = HECEndpointType;
exports.HttpEndpointCommonAttributeFilterSensitiveLog = HttpEndpointCommonAttributeFilterSensitiveLog;
exports.HttpEndpointConfigurationFilterSensitiveLog = HttpEndpointConfigurationFilterSensitiveLog;
exports.HttpEndpointDescriptionFilterSensitiveLog = HttpEndpointDescriptionFilterSensitiveLog;
exports.HttpEndpointDestinationConfigurationFilterSensitiveLog = HttpEndpointDestinationConfigurationFilterSensitiveLog;
exports.HttpEndpointDestinationDescriptionFilterSensitiveLog = HttpEndpointDestinationDescriptionFilterSensitiveLog;
exports.HttpEndpointDestinationUpdateFilterSensitiveLog = HttpEndpointDestinationUpdateFilterSensitiveLog;
exports.HttpEndpointRequestConfigurationFilterSensitiveLog = HttpEndpointRequestConfigurationFilterSensitiveLog;
exports.HttpEndpointS3BackupMode = HttpEndpointS3BackupMode;
exports.IcebergS3BackupMode = IcebergS3BackupMode;
exports.InvalidArgumentException = InvalidArgumentException;
exports.InvalidKMSResourceException = InvalidKMSResourceException;
exports.InvalidSourceException = InvalidSourceException;
exports.KeyType = KeyType;
exports.LimitExceededException = LimitExceededException;
exports.ListDeliveryStreamsCommand = ListDeliveryStreamsCommand;
exports.ListTagsForDeliveryStreamCommand = ListTagsForDeliveryStreamCommand;
exports.NoEncryptionConfig = NoEncryptionConfig;
exports.OrcCompression = OrcCompression;
exports.OrcFormatVersion = OrcFormatVersion;
exports.ParquetCompression = ParquetCompression;
exports.ParquetWriterVersion = ParquetWriterVersion;
exports.ProcessorParameterName = ProcessorParameterName;
exports.ProcessorType = ProcessorType;
exports.PutRecordBatchCommand = PutRecordBatchCommand;
exports.PutRecordCommand = PutRecordCommand;
exports.RedshiftDestinationConfigurationFilterSensitiveLog = RedshiftDestinationConfigurationFilterSensitiveLog;
exports.RedshiftDestinationDescriptionFilterSensitiveLog = RedshiftDestinationDescriptionFilterSensitiveLog;
exports.RedshiftDestinationUpdateFilterSensitiveLog = RedshiftDestinationUpdateFilterSensitiveLog;
exports.RedshiftS3BackupMode = RedshiftS3BackupMode;
exports.ResourceInUseException = ResourceInUseException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.S3BackupMode = S3BackupMode;
exports.SSLMode = SSLMode;
exports.ServiceUnavailableException = ServiceUnavailableException;
exports.SnapshotRequestedBy = SnapshotRequestedBy;
exports.SnapshotStatus = SnapshotStatus;
exports.SnowflakeDataLoadingOption = SnowflakeDataLoadingOption;
exports.SnowflakeDestinationConfigurationFilterSensitiveLog = SnowflakeDestinationConfigurationFilterSensitiveLog;
exports.SnowflakeDestinationDescriptionFilterSensitiveLog = SnowflakeDestinationDescriptionFilterSensitiveLog;
exports.SnowflakeDestinationUpdateFilterSensitiveLog = SnowflakeDestinationUpdateFilterSensitiveLog;
exports.SnowflakeRoleConfigurationFilterSensitiveLog = SnowflakeRoleConfigurationFilterSensitiveLog;
exports.SnowflakeS3BackupMode = SnowflakeS3BackupMode;
exports.SnowflakeVpcConfigurationFilterSensitiveLog = SnowflakeVpcConfigurationFilterSensitiveLog;
exports.SplunkS3BackupMode = SplunkS3BackupMode;
exports.StartDeliveryStreamEncryptionCommand = StartDeliveryStreamEncryptionCommand;
exports.StopDeliveryStreamEncryptionCommand = StopDeliveryStreamEncryptionCommand;
exports.TagDeliveryStreamCommand = TagDeliveryStreamCommand;
exports.UntagDeliveryStreamCommand = UntagDeliveryStreamCommand;
exports.UpdateDestinationCommand = UpdateDestinationCommand;
exports.UpdateDestinationInputFilterSensitiveLog = UpdateDestinationInputFilterSensitiveLog;
